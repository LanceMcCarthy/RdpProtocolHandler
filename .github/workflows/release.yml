name: Release

on:
  workflow_dispatch:
  push:
    branches: [ release ]
    paths: [ 'src/**/*', '.github/workflows/release.yml' ]

jobs:
  build_and_release:
    runs-on: windows-latest
    env:
      RID: win-x64
      SLN_PATH: src/RdpProtocolHandler.sln
      CSPROJ_PATH: src/RdpProtocolHandler/RdpProtocolHandler.csproj
      BUILD_CONFIGURATION: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0'

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3

# *********** PREPARE *********** #

    - name: Generate version number with date and workflow Run Number
      id: version-creator
      run: |
        $buildDay = Get-Date -Format "yyyy.Mdd"
        $ver = "$buildDay" + "." + "${{ github.RUN_NUMBER }}" + ".0"
        echo "::set-output name=APP_VERSION::$ver"

    - name: Update app's assembly version
      run: |
        function SetAssemblyFileVersion([string]$pathToFile, [string]$newVersion) {
          $newFile = Get-Content $pathToFile -encoding "UTF8" | foreach-object {
            if ($_.StartsWith("[assembly: AssemblyFileVersion")) {
              $verStart = $_.IndexOf("(")
              $verEnd = $_.IndexOf(")", $verStart)
              $origVersion = $_.SubString($verStart+2, $verEnd-$verStart-3)
              $newVersion = "${{ steps.version-creator.outputs.APP_VERSION }}"
              write-host "Setting AssemblyFileVersion from $origVersion to $newVersion"
              $_.Replace($origVersion, $newVersion)
            }  else {
              $_
            }
          }
          $newfile | Set-Content $assemblyInfoPath -encoding "UTF8"
        }
        $assemblyInfoPath = "src\RdpProtocolHandler\Properties\AssemblyInfo.cs"
        SetAssemblyFileVersion $assemblyInfoPath "${{ steps.version-creator.outputs.APP_VERSION }}"

    - name: Import code signing certificate
      shell: powershell
      run: |
        $pfxCertFilePath = Join-Path -Path $PSScriptRoot -ChildPath "CodeSigningCertificate.pfx"
        Set-Content -Value $([System.Convert]::FromBase64String($env:BASE64_PFX)) -Path $pfxCertFilePath -Encoding Byte
        $codeSigningCert = Import-PfxCertificate -FilePath $pfxCertFilePath -Password $($env:PFX_PASSWORD | ConvertTo-SecureString -AsPlainText -Force) -CertStoreLocation Cert:\CurrentUser\My
      env:
        BASE64_PFX: ${{ secrets.LANCELOT_PFX_DATA }}
        PFX_PASSWORD: ${{ secrets.LANCELOT_PFX_PASSWORD }}
    
    - name: Sign PowerShell Scripts
      run: |
        $scripts = Get-ChildItem -Path ".scripts\" -Filter "*.ps1" -Recurse -ErrorAction Stop
        $codeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Select-Object -First 1
        foreach ($script in $scripts) {
          try {
            $scriptContent = Get-Content -Path $script.FullName
            Write-Output "Signing script `"$($script.Name)`" with certificate `"$($codeSigningCert.Thumbprint)`""
            $null = Set-AuthenticodeSignature -Certificate $codeSigningCert -FilePath $script.FullName -TimestampServer "http://timestamp.digicert.com/"
          }
          catch {
            Write-Error $_
          }
        }

    - name: Remove code signing certificate
      shell: powershell
      run: Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Select-Object -First 1 | Remove-Item

# *********** BUILD *********** #

    - name: Install NuGet packages
      run: dotnet restore ${{ env.CSPROJ_PATH }} --runtime ${{ env.RID }}

    - name: Restore project dependencies
      run: msbuild ${{ env.CSPROJ_PATH }} /t:Restore /p:Configuration=${{ env.BUILD_CONFIGURATION }}

    - name: Build project
      run: msbuild ${{ env.CSPROJ_PATH }} /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:RuntimeIdentifier=${{ env.RID }}
    
    - name: Copy Scripts and Release Content to Build Output
      run: |
        # Copy the installation scripts
        Copy-Item -Path ".scripts\install.ps1" -Destination "src\RdpProtocolHandler\bin\Release\"
        Copy-Item -Path ".scripts\uninstall.ps1" -Destination "src\RdpProtocolHandler\bin\Release\"
        # Copy the help page
        Copy-Item -Path ".github\other\releasebody.md" -Destination "src\RdpProtocolHandler\bin\Release\"

# *********** CODESIGN *********** #

    - name: Code Sign binary
      uses: lando/code-sign-action@v2
      with:
        file: src\RdpProtocolHandler\bin\Release\RdpProtocolHandler.exe
        certificate-data: ${{ secrets.LANCELOT_PFX_DATA }}
        certificate-password: ${{ secrets.LANCELOT_PFX_PASSWORD }}

# *********** PUBLISH *********** #

    - name: ZIP up artifact
      run: Compress-Archive -Path "src\RdpProtocolHandler\bin\Release\*" -DestinationPath "RdpProtocolHandler_${{ steps.version-creator.outputs.APP_VERSION }}_${{ env.RID }}.zip"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ steps.version-creator.outputs.APP_VERSION }}"
        release_name: "Release ${{ steps.version-creator.outputs.APP_VERSION }}"
        body_path: .github\other\releasebody.md

    - name: Attach Release Asset
      id: upload-sideload-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "RdpProtocolHandler_${{ steps.version-creator.outputs.APP_VERSION }}_${{ env.RID }}.zip"
        asset_name: "RdpProtocolHandler_${{ steps.version-creator.outputs.APP_VERSION }}_${{ env.RID }}.zip"
        asset_content_type: application/zip
